tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - custom_types_074.yaml

repositories:
  docker_hub: https://hub.docker.com/
  test_hub: https://test.hub.com/

topology_template:
  node_templates:
    docker-container:
      type: tosca.nodes.MiCADO.Container.Application.Docker
      requirements:
      - host: fake-vm
      - volume: fake-vol
      - volume: fake-vol-interface
      - volume:
          node: fake-vol-abst
          relationship:
            type: tosca.relationships.AttachesTo
            properties:
              location: usethisone
      - volume:
          node: fake-vol-abst-no-rel
      - volume: fake-config
      - volume: fake-config-abst

      properties:
        image: myimage:v123
        environment:
          VARONE: 123
          VARTWO: 456
        entrypoint: "stress -l 50 --cpu-method pi"
        stop_signal: SIGKILL
        ports:
        - containerPort: 1234
        - target: 5000
          mode: host
          published: 5050
        - target: 4000
          mode: ingress
          protocol: udp
        - targetPort: "3000"
          port: 3030
          nodePort: 30000
        - target: 2000
          mode: ingress
          nodePort: 30003
        - target: 1000
          nodePort: 30006
          metadata:
            name: my-custom-name
        - target: 1000
          type: LoadBalancer
          nodePort: 30009
        pid: "host"

    docker-container-with-artifact_bad_name:
      type: tosca.nodes.MiCADO.Container.Application.Docker
      properties:
        name: bad_name
        container_name: bad_name_too
      artifacts:
        image:
          type: tosca.artifacts.Deployment.Image.Container.Docker
          file: myimage:v5000
          repository: docker_hub


    docker-container-with-custom-repo-artifact:
      type: tosca.nodes.MiCADO.Container.Application.Docker
      artifacts:
        image:
          type: tosca.artifacts.Deployment.Image.Container.Docker
          file: myimage:v123
          repository: test_hub

    docker-by-kube:
      type: tosca.nodes.MiCADO.Container.Application.Docker
      properties:
        image: happy-image
        ports:
        - port: 3000
        - port: 4000

    docker-by-kube-service:
      type: tosca.nodes.MiCADO.Container.Application.Docker
      properties:
        image: happy-image
        ports:
        - port: 3000
        - port: 4000
          metadata:
            namespace: service-ns
    

    add-container-to-workload:
      type: tosca.nodes.MiCADO.Container.Application.Docker
      properties:
        image: happy-image:v1000
      requirements:
      - container: docker-container

    add-containers-to-bare-pod:
      type: tosca.nodes.MiCADO.Container.Pod.Kubernetes
      requirements:
      - container: docker-container
      - container: docker-container-with-artifact_bad_name

    daemonset-by-auto:
      type: tosca.nodes.MiCADO.Container.Application.Docker.DaemonSet
      properties:
        image: happy-image

    overwrite-with-auto:
      type: tosca.nodes.MiCADO.Container.Application.Docker.DaemonSet
      properties:
        image: happy-image
      interfaces:
        Kubernetes:
          create:
            inputs:
              kind: Deployment

    fake-vm:
      type: tosca.nodes.MiCADO.EC2.Compute
      properties:
        region_name: mypath
        image_id: 128jd91fj
        instance_type: asd 

    fake-vol:
      type: tosca.nodes.MiCADO.Container.Volume

    fake-vol-interface:
      type: tosca.nodes.MiCADO.Container.Volume
      interfaces:
        Kubernetes:
          create:
            inputs:
              hostPath:
                path: getthispath
              accessModes:
              - "overwrite other"

    fake-vol-abst:
      type: tosca.nodes.MiCADO.Container.Volume.NFS
      properties:
        path: volinprop
        server: 192.168.1.1

    fake-vol-abst-no-rel:
      type: tosca.nodes.MiCADO.Container.Volume.NFS
      properties:
        path: volinprop
        server: 192.168.1.1

    fake-config:
      type: tosca.nodes.MiCADO.Container.Config
      interfaces:
        Kubernetes:
          create:
            inputs:
              binaryData:
                bingoes: here

    fake-config-abst:
      type: tosca.nodes.MiCADO.Container.Config.Kubernetes
      properties:
        data:
          datagoes: here
        



    
